{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "ySUhEdWFOdGO",
        "outputId": "4f1b9843-b7e4-45d5-c318-928e7b467ab9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: dash in /usr/local/lib/python3.10/dist-packages (2.18.1)\n",
            "Requirement already satisfied: dash-bio in /usr/local/lib/python3.10/dist-packages (1.0.2)\n",
            "Requirement already satisfied: Flask<3.1,>=1.0.4 in /usr/local/lib/python3.10/dist-packages (from dash) (2.2.5)\n",
            "Requirement already satisfied: Werkzeug<3.1 in /usr/local/lib/python3.10/dist-packages (from dash) (3.0.4)\n",
            "Requirement already satisfied: plotly>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from dash) (5.24.1)\n",
            "Requirement already satisfied: dash-html-components==2.0.0 in /usr/local/lib/python3.10/dist-packages (from dash) (2.0.0)\n",
            "Requirement already satisfied: dash-core-components==2.0.0 in /usr/local/lib/python3.10/dist-packages (from dash) (2.0.0)\n",
            "Requirement already satisfied: dash-table==5.0.0 in /usr/local/lib/python3.10/dist-packages (from dash) (5.0.0)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.10/dist-packages (from dash) (8.5.0)\n",
            "Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.10/dist-packages (from dash) (4.12.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from dash) (2.32.3)\n",
            "Requirement already satisfied: retrying in /usr/local/lib/python3.10/dist-packages (from dash) (1.3.4)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.10/dist-packages (from dash) (1.6.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from dash) (71.0.4)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from dash-bio) (2.2.2)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from dash-bio) (1.13.1)\n",
            "Requirement already satisfied: scikit-learn>=0.20.1 in /usr/local/lib/python3.10/dist-packages (from dash-bio) (1.5.2)\n",
            "Requirement already satisfied: colour in /usr/local/lib/python3.10/dist-packages (from dash-bio) (0.1.5)\n",
            "Requirement already satisfied: GEOparse>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from dash-bio) (2.0.4)\n",
            "Requirement already satisfied: jsonschema in /usr/local/lib/python3.10/dist-packages (from dash-bio) (4.23.0)\n",
            "Requirement already satisfied: parmed in /usr/local/lib/python3.10/dist-packages (from dash-bio) (4.2.2)\n",
            "Requirement already satisfied: periodictable in /usr/local/lib/python3.10/dist-packages (from dash-bio) (1.7.1)\n",
            "Requirement already satisfied: biopython>=1.77 in /usr/local/lib/python3.10/dist-packages (from dash-bio) (1.84)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from biopython>=1.77->dash-bio) (1.26.4)\n",
            "Requirement already satisfied: Jinja2>=3.0 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (3.1.4)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (2.2.0)\n",
            "Requirement already satisfied: click>=8.0 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (8.1.7)\n",
            "Requirement already satisfied: tqdm>=4.31.1 in /usr/local/lib/python3.10/dist-packages (from GEOparse>=1.1.0->dash-bio) (4.66.5)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->dash-bio) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dash-bio) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas->dash-bio) (2024.2)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly>=5.0.0->dash) (9.0.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly>=5.0.0->dash) (24.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (2024.8.30)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.20.1->dash-bio) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.20.1->dash-bio) (3.5.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from Werkzeug<3.1->dash) (3.0.1)\n",
            "Requirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata->dash) (3.20.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema->dash-bio) (24.2.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema->dash-bio) (2024.10.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema->dash-bio) (0.35.1)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema->dash-bio) (0.20.0)\n",
            "Requirement already satisfied: pyparsing in /usr/local/lib/python3.10/dist-packages (from periodictable->dash-bio) (3.1.4)\n",
            "Requirement already satisfied: six>=1.7.0 in /usr/local/lib/python3.10/dist-packages (from retrying->dash) (1.16.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install dash dash-bio\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from dash import Dash, html, dcc, Input, Output, callback\n",
        "import dash_bio as dashbio\n",
        "\n",
        "# List of genes with associated locus and pathology info\n",
        "genes_info = {\n",
        "    'FBN1': {\n",
        "        'chromosome': '15',\n",
        "        'locus': '15q21',\n",
        "        'start': 48400000,\n",
        "        'end': 48800000,\n",
        "        'color': 'red',\n",
        "        'pathology': {\n",
        "            'titre': 'Syndrome de Marfan',\n",
        "            'définition': \"Le syndrome de Marfan est une maladie génétique qui affecte le tissu conjonctif.\",\n",
        "            'prévalence': \"Rare, environ 1 personne sur 5000.\",\n",
        "            'symptomes_généraux': \"Grande taille et membres disproportionnés (longs bras, jambes, doigts et orteils), symptômes cardiovasculaires, oculaires et squelettiques.\",\n",
        "            'symptomes_oraux': \"Palais ogival, dents encombrées.\",\n",
        "            'prise_en_charge_médicale': \"Suivi cardiaque, prévention des complications.\",\n",
        "            'prise_en_charge_dentaire': \"Prévention des infections buccales et soins orthodontiques.\"\n",
        "        }\n",
        "    },\n",
        "    # You can add more genes here in the same format as FBN1\n",
        "}\n",
        "\n",
        "# Create the Dash app\n",
        "app = Dash(__name__)\n",
        "\n",
        "app.layout = html.Div([\n",
        "    'Select which chromosomes to display on the ideogram below:',\n",
        "    dcc.Dropdown(\n",
        "        id='my-default-displayed-chromosomes',\n",
        "        options=[{'label': str(i), 'value': str(i)} for i in range(1, 23)] + [{'label': 'X', 'value': 'X'}, {'label': 'Y', 'value': 'Y'}],\n",
        "        multi=True,\n",
        "        value=[str(i) for i in range(1, 23)] + ['X', 'Y']  # Default selection: All chromosomes\n",
        "    ),\n",
        "\n",
        "    dashbio.Ideogram(\n",
        "        id='my-default-dashbio-ideogram',\n",
        "        chromosomes=[str(i) for i in range(1, 23)] + ['X', 'Y'],  # Display all chromosomes by default\n",
        "        annotations=[{\n",
        "            'name': gene,\n",
        "            'chr': info['chromosome'],\n",
        "            'start': info['start'],\n",
        "            'stop': info['end'],\n",
        "            'color': info['color']\n",
        "        } for gene, info in genes_info.items()]\n",
        "    ),\n",
        "\n",
        "    dcc.Dropdown(\n",
        "        id='gene-dropdown',\n",
        "        options=[{'label': gene, 'value': gene} for gene in genes_info.keys()],\n",
        "        value='FBN1',  # Default gene selection (can be changed)\n",
        "        placeholder=\"Select a gene\"\n",
        "    ),\n",
        "\n",
        "    html.Div(id='gene-info')\n",
        "])\n",
        "\n",
        "# Update gene information based on dropdown selection\n",
        "@callback(\n",
        "    Output('gene-info', 'children'),\n",
        "    Input('gene-dropdown', 'value')\n",
        ")\n",
        "def display_gene_info(selected_gene):\n",
        "    if selected_gene:\n",
        "        gene = genes_info[selected_gene]\n",
        "        pathology = gene['pathology']\n",
        "        return html.Div([\n",
        "            html.H2(pathology['title']),\n",
        "            html.P(f\"Locus: {gene['locus']}\"),\n",
        "            html.P(f\"Definition: {pathology['definition']}\"),\n",
        "            html.P(f\"Prevalence: {pathology['prevalence']}\"),\n",
        "            html.P(f\"General Symptoms: {pathology['symptoms_general']}\"),\n",
        "            html.P(f\"Oral Symptoms: {pathology['symptoms_oral']}\"),\n",
        "            html.P(f\"Medical Management: {pathology['medical_management']}\"),\n",
        "            html.P(f\"Dental Management: {pathology['dental_management']}\")\n",
        "        ])\n",
        "    return \"Select a gene to view pathology information.\"\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run_server(debug=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 671
        },
        "id": "j6_ChHchg8av",
        "outputId": "1bac5190-1418-4ee5-c965-681d519f193a"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "(async (port, path, width, height, cache, element) => {\n",
              "    if (!google.colab.kernel.accessAllowed && !cache) {\n",
              "      return;\n",
              "    }\n",
              "    element.appendChild(document.createTextNode(''));\n",
              "    const url = await google.colab.kernel.proxyPort(port, {cache});\n",
              "    const iframe = document.createElement('iframe');\n",
              "    iframe.src = new URL(path, url).toString();\n",
              "    iframe.height = height;\n",
              "    iframe.width = width;\n",
              "    iframe.style.border = 0;\n",
              "    iframe.allow = [\n",
              "        'accelerometer',\n",
              "        'autoplay',\n",
              "        'camera',\n",
              "        'clipboard-read',\n",
              "        'clipboard-write',\n",
              "        'gyroscope',\n",
              "        'magnetometer',\n",
              "        'microphone',\n",
              "        'serial',\n",
              "        'usb',\n",
              "        'xr-spatial-tracking',\n",
              "    ].join('; ');\n",
              "    element.appendChild(iframe);\n",
              "  })(8050, \"/\", \"100%\", 650, false, window.element)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from dash import Dash, html, dcc, Input, Output, callback\n",
        "import dash_bio as dashbio\n",
        "\n",
        "# List of genes with associated locus and pathology info\n",
        "genes_info = {\n",
        "    'FBN1': {\n",
        "        'chromosome': '15',\n",
        "        'locus': '15q21',\n",
        "        'start': 48400000,\n",
        "        'end': 48800000,\n",
        "        'color': 'red',\n",
        "        'pathology': {\n",
        "            'title': 'Syndrome de Marfan',\n",
        "            'definition': \"Le syndrome de Marfan est une maladie génétique qui affecte le tissu conjonctif.\",\n",
        "            'prevalence': \"Rare, environ 1 personne sur 5000.\",\n",
        "            'symptoms_general': \"Symptômes cardiovasculaires, oculaires et squelettiques.\",\n",
        "            'symptoms_oral': \"Palais ogival, dents encombrées.\",\n",
        "            'medical_management': \"Suivi cardiaque, prévention des complications.\",\n",
        "            'dental_management': \"Prévention des infections buccales et soins orthodontiques.\"\n",
        "        }\n",
        "    },\n",
        "    # You can add more genes here in the same format as FBN1\n",
        "}\n",
        "\n",
        "# Create the Dash app\n",
        "app = Dash(__name__)\n",
        "\n",
        "app.layout = html.Div([\n",
        "    'Select which chromosomes to display on the ideogram below:',\n",
        "    dcc.Dropdown(\n",
        "        id='my-default-displayed-chromosomes',\n",
        "        options=[{'label': str(i), 'value': str(i)} for i in range(1, 23)] + [{'label': 'X', 'value': 'X'}, {'label': 'Y', 'value': 'Y'}],\n",
        "        multi=True,\n",
        "        value=[str(i) for i in range(1, 23)] + ['X', 'Y']  # Default selection: All chromosomes\n",
        "    ),\n",
        "\n",
        "    dashbio.Ideogram(\n",
        "        id='my-default-dashbio-ideogram',\n",
        "        chromosomes=[str(i) for i in range(1, 23)] + ['X', 'Y'],  # Display all chromosomes by default\n",
        "        annotations=[{\n",
        "            'name': gene,\n",
        "            'chr': info['chromosome'],\n",
        "            'start': info['start'],\n",
        "            'stop': info['end'],\n",
        "            'color': info['color']\n",
        "        } for gene, info in genes_info.items()]\n",
        "    ),\n",
        "\n",
        "    dcc.Dropdown(\n",
        "        id='gene-dropdown',\n",
        "        options=[{'label': gene, 'value': gene} for gene in genes_info.keys()],\n",
        "        value='FBN1',  # Default gene selection (can be changed)\n",
        "        placeholder=\"Select a gene\"\n",
        "    ),\n",
        "\n",
        "    html.Div(id='gene-info')\n",
        "])\n",
        "\n",
        "# Update gene information based on dropdown selection\n",
        "@callback(\n",
        "    Output('gene-info', 'children'),\n",
        "    Input('gene-dropdown', 'value')\n",
        ")\n",
        "def display_gene_info(selected_gene):\n",
        "    if selected_gene:\n",
        "        gene = genes_info[selected_gene]\n",
        "        pathology = gene['pathology']\n",
        "        return html.Div([\n",
        "            html.H2(pathology['title']),\n",
        "            html.P(f\"Locus: {gene['locus']}\"),\n",
        "            html.P(f\"Definition: {pathology['definition']}\"),\n",
        "            html.P(f\"Prevalence: {pathology['prevalence']}\"),\n",
        "            html.P(f\"General Symptoms: {pathology['symptoms_general']}\"),\n",
        "            html.P(f\"Oral Symptoms: {pathology['symptoms_oral']}\"),\n",
        "            html.P(f\"Medical Management: {pathology['medical_management']}\"),\n",
        "            html.P(f\"Dental Management: {pathology['dental_management']}\")\n",
        "        ])\n",
        "    return \"Select a gene to view pathology information.\"\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run_server(debug=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 671
        },
        "id": "tAqGn-K4jC_C",
        "outputId": "7e06ae9a-4c12-4aeb-f3cb-e1f61b30383f"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "(async (port, path, width, height, cache, element) => {\n",
              "    if (!google.colab.kernel.accessAllowed && !cache) {\n",
              "      return;\n",
              "    }\n",
              "    element.appendChild(document.createTextNode(''));\n",
              "    const url = await google.colab.kernel.proxyPort(port, {cache});\n",
              "    const iframe = document.createElement('iframe');\n",
              "    iframe.src = new URL(path, url).toString();\n",
              "    iframe.height = height;\n",
              "    iframe.width = width;\n",
              "    iframe.style.border = 0;\n",
              "    iframe.allow = [\n",
              "        'accelerometer',\n",
              "        'autoplay',\n",
              "        'camera',\n",
              "        'clipboard-read',\n",
              "        'clipboard-write',\n",
              "        'gyroscope',\n",
              "        'magnetometer',\n",
              "        'microphone',\n",
              "        'serial',\n",
              "        'usb',\n",
              "        'xr-spatial-tracking',\n",
              "    ].join('; ');\n",
              "    element.appendChild(iframe);\n",
              "  })(8050, \"/\", \"100%\", 650, false, window.element)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}
